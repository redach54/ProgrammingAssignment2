f(2)
x(2)
debug()
fun()
}
apply(x, 2, sum)
list(set = set, get = get, setmatrix = setmatrix, getmatrix)
makeCacheMatrix <- function(x = matrix(nrow = 2, ncol = 2)) {
}
matrix
makeCacheMatrix <- function(x = matrix()) {
}
matrix(nrow = 2)
matrix(nrow = 2, ncol = 2)
matrix(data = 1:4, nrow = 1, ncol = 2)
matric(data = 1:4, nrow = 2, ncol = 2)
matrix(data = 1:4, nrow = 2, ncol = 2)
}
}
de## Write a short comment describing this function
mmatrix(nrow = 2, ncol = 2)
matrix(data = 1:4, nrow = 2, ncol = 2)
cacheSolve <- function(x, ...) {
}
setmatrix <- function(matrix) m <<- matrix
2:2
1:4
2:4
1:4, 4:1
1:4 4:1
1:3:1
1:2
makeCacheMatrix <- function(x = matrix()) {
}
matrix(data = 1:6, nrow = 2, ncol = 2, byword = TRUE)
matrix(data = 1:6, nrow = 2, ncol = 2, dimnames = "Ern", "Stan")
matrix(data = 1:6, nrow = 2, ncol = 2, dimnames = "Ern")
matrix(data = 1:6, nrow = 2, ncol = 2)
setmatrix <- function(matrix) m <<- matrix
1:4
getmatrix <- function() m
1:4
2:4
list(set = set, get = get, setmatrix = setmatrix, getmatrix)
m <- NULL
get <- function() x
makeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
}
matrix
x
x <<- 1:4
x
x <<- 1:4, 2, 2
x <<- 1:4 2 2
makeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
}
makeCacheMatrix(1:4, 2, 2)
makeCacheMatrix(1:4)
makeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
}
makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
}
makeCacheMatrix(x = matrix())
inv <<- NULL
makeCacheMatrix <- function(x = matrix()) {
}
x
makeCacheMatrix <- function(x = matrix()) {
}
x
set <- function(y) {
makeCacheMatrix <- function(x = matrix()) {
}
x
}
x
makeCacheMatrix <- function(x = matrix()) {
}
x
getmatrix <- function() m
x
list(set = set, get = get, setmatrix = setmatrix, getmatrix)
makeCacheMatrix <- function(x = matrix()) {
}
x
makeCacheMatrix <- function(x = matrix()) {
}
x
matrix
list(set = set, get = get, setmatrix, getmatrix)
list(set = set, get = get, setmatrix = setmatrix, getmatrix)
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
x
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
}
}
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)}
x
## Put comments here that give an overall description of what your
source('C:/Users/aidan_000/Desktop/Data Science/Course Two/ProgrammingAssignment2/cachematrix2.R', echo=TRUE)
solve(x)
solve(x)
det(x)
x
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
}
de## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get, setmatrix = setmatrix, getmatrix = getmatrix)
}
x
matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmatrix <- function(inverse) inv <<- inverse
getmatrix <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
matrix()
x
solve(matrix())
matrix(data = 1:4, 2, 2)
solve(matrix(1:4, 2, 2))
det(matrix(1:4, 2, 2))
makeCacheMatrix <- function(x = matrix()) {{
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmatrix <- function(inverse) inv <<- inverse
getmatrix <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
return(matrix(data = 1:4, nrow = 2, ncol = 2))
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmatrix <- function(inverse) inv <<- inverse
getmatrix <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
return(matrix(data = 1:4, nrow = 2, ncol = 2))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmatrix <- function(inverse) inv <<- inverse
getmatrix <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
return(matrix(data = 1:4, nrow = 2, ncol = 2))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmatrix <- function(inverse) inv <<- inverse
getmatrix <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
de## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- mean(data, ...)
inv$setinv(inv)
inv
}
inv
function
function()
matrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setmatrix <- function(inverse) inv <<- inverse
getmatrix <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
de## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- inv(data, ...)
inv$setinv(inv)
inv
}
x
inv
makeCacheMatrix <- function(x = matrix()) {
inv = NULL
set = function(y) {
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
inv = x$getinv()
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data, ...)
x$setinv(inv)
return(inv)
}
inv
x
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
x
matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
de## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
inv$setinv(inv)
inv
}
inverse
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
cacheSolve(x)
m = makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(m)
inverse.gaussian()
cacheSolve(m)
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(m)
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
de## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
x
x = rbind(c(2, 3), c(3, 2))
m = makeCacheMatrix(x)
x$get
m$get(x)
m$get()
cacheSolve(x)
cacheSolve(m)
x = rbind(c(2, 3), c(3, 2))
m = makeCacheMatrix(x)
m$get()
cacheSolve(x)
cacheSolve(m)
x = rbind(c(2, 3), c(3, 2))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
x = rbind(c(2, 3), c(3, 2))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
